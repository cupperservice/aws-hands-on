AWSTemplateFormatVersion: '2010-09-09'
Description: 'home work of database'
Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: vockey
  EC2ImageId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: MyVPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.10.0/24
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: Public-subnet1
      VpcId:
        !Ref MyVPC
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.20.0/24
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: Public-subnet2
      VpcId:
        !Ref MyVPC
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.30.0/24
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: Private-subnet1
      VpcId:
        !Ref MyVPC
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.40.0/24
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: Private-subnet2
      VpcId:
        !Ref MyVPC
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: igw
  IGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        !Ref IGW
      VpcId:
        !Ref MyVPC
  NATGW:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        !GetAtt NATGWEIP.AllocationId
      ConnectivityType: public
      SubnetId:
        !Ref PublicSubnet1
      Tags:
      - Key: Name
        Value: nat
  NATGWEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        !Ref MyVPC
      Tags:
        - Key: Name
          Value: public
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        !Ref IGW
  PrivateRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        !Ref MyVPC
      Tags:
        - Key: Name
          Value: private
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        !Ref PrivateRT
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        !Ref NATGW
  PublicSubnet1RT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        !Ref PublicRT
      SubnetId:
        !Ref PublicSubnet1
  PublicSubnet2RT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        !Ref PublicRT
      SubnetId:
        !Ref PublicSubnet2
  PrivateSubnet1RT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        !Ref PrivateRT
      SubnetId:
        !Ref PrivateSubnet1
  PrivateSubnet2RT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        !Ref PrivateRT
      SubnetId:
        !Ref PrivateSubnet2
  BastionSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: For a bastion server
      GroupName: bastion security group
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: bastion
      VpcId:
        !Ref MyVPC
  BastionSVR:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        !Ref EC2ImageId
      InstanceType: t2.micro
      KeyName:
        !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref BastionSG
          SubnetId:
            !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: bastion
Outputs:
  Vpc:
    Value:
      !Ref MyVPC
    Export:
      Name:
        !Join [ ":", [ !Ref "AWS::StackName", MyVPC ] ]
  PublicSubnet1:
    Value:
      !Ref PublicSubnet1
    Export:
      Name:
        !Join [ ":", [ !Ref "AWS::StackName", PublicSubnet1 ] ]
  PublicSubnet2:
    Value:
      !Ref PublicSubnet2
    Export:
      Name:
        !Join [ ":", [ !Ref "AWS::StackName", PublicSubnet2 ] ]
  PrivateSubnet1:
    Value:
      !Ref PrivateSubnet1
    Export:
      Name:
        !Join [ ":", [ !Ref "AWS::StackName", PrivateSubnet1 ] ]
  PrivateSubnet2:
    Value:
      !Ref PrivateSubnet2
    Export:
      Name:
        !Join [ ":", [ !Ref "AWS::StackName", PrivateSubnet2 ] ]
